#!/usr/bin/env python3
import sys
import re
import traceback
from typing import Dict

from lib_testbed.generic.util.logger import log
from lib_testbed.generic.util.base_tool import ClientPodTool
from lib_testbed.generic.client.client import Clients


class ClientTool(ClientPodTool):

    def get_command_list(self, parsed_args):
        config = self.get_config()
        kwargs = {'config': config, 'multi_obj': True}
        names = self.get_nicknames(parsed_args)
        if names:
            kwargs['nicknames'] = names
        try:
            # TODO: remove once MacOS support is ready
            kwargs['type'] = 'linux|rpi|pod|hydra|pp403z|pp603x|windows|debian'
            clients_obj = Clients(**kwargs)
            clients_api = clients_obj.resolve_obj(**kwargs)
            client_lib = clients_api.lib
            self.tool = clients_api.lib.tool
        except Exception as e:
            if self.debug:
                traceback.print_exc(limit=2, file=sys.stdout)
            if re.compile(r"name: .* not found in config").match(str(e)) or \
                    re.compile(r"No client available for.*").match(str(e)):
                log.error(f"Unexpected client name: {kwargs['nicknames']}!. "
                          "First parameter should be client name specifier")
                exit(1)
            raise

        commands = self.map_commands_to_objects(self.tool)

        return commands, client_lib

    @property
    def map_commands_to_method_names(self) -> Dict:

        commands = {'list': 'list',
                    'run': 'run',
                    'ping': 'ping',
                    'uptime': 'uptime',
                    'version': 'version',
                    'deploy': 'deploy',
                    'ssh': 'ssh',
                    'put-file': 'put_file',
                    'get-file': 'get_file',
                    'scan': 'scan',
                    'connect': 'connect',
                    'disconnect': 'disconnect',
                    'eth-connect': 'eth_connect',
                    'eth-disconnect': 'eth_disconnect',
                    'ping-check': 'ping_check',
                    'winfo': 'wifi_winfo',
                    'info': 'info',
                    'ep': 'ep',
                    'reboot': 'reboot',
                    'wmonitor': 'wifi_monitor',
                    'wstation': 'wifi_station',
                    'get-ifaces': 'get_ifaces',
                    'get-mac': 'get_mac',
                    'pod-to-client': 'pod_to_client',
                    'client-to-pod': 'client_to_pod',
                    'upgrade': 'upgrade',
                    'get-region': 'get_region',
                    'set-region': 'set_region',
                    'start-adt': 'start_simulate_client',
                    'clear-adt': 'clear_adt',
                    'adt-list-devices': 'get_clients_to_simulate',
                    'start-ap': 'create_ap',
                    'stop-ap': 'disable_ap',
                    'start-dhclient': 'refresh_ip_address',
                    'get-temperature': 'get_temperature',
                    'mocha-enable': 'mocha_enable',
                    'mocha-disable': 'mocha_disable',
                    'help': 'get_tool_help_str'}

        return commands


def main(args):
    client_tool = ClientTool(args)
    client_tool.execute()
    exit(0)


if __name__ == "__main__":
    main(sys.argv)
