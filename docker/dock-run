#!/bin/sh -ae

echo_debug()
{
    echo "${ColorDEBUG}$@${ColorOff}" >&2
}

export DOCKER_TAG=${DOCKER_TAG:-'trident'}
SKIP_DOCKER_START=${SKIP_DOCKER_START:-}
DOCKER_START_FLAG=${DOCKER_START_FLAG:-"-ai"}
DOCKER_CONTAINER_NAME=${DOCKER_CONTAINER_NAME:-}
DOCKER_HOSTNAME=${DOCKER_HOSTNAME:-"$(hostname | cut -d '.' -f1)-docker"}
DOCKER_HOSTNAME=$(echo "$DOCKER_HOSTNAME" | head -c 64)
export TOOLS_DIR=${TOOLS_DIR:-"$OPENSYNC_ROOT/tools"}
DOCKER_COMMAND=${DOCKER_COMMAND:-"create"}
# Additional Dockerfile that will be built atop the standard ones and then run.
# It needs to accept PARENT_IMAGE arg and expect to be built with the directory
# where it resides as its context.
DOCKER_EXTRA_DOCKERFILE=${DOCKER_EXTRA_DOCKERFILE:-}
# Enable BuildKit, so that we can use "RUN --mount=type=cache ..." in Dockerfiles.
export DOCKER_BUILDKIT=1


# Create framework cache directory
FRAMEWORK_CACHE_DIR="$OPENSYNC_ROOT/.framework_cache"
VIRTUAL_ENV="/tmp/.venv/"
mkdir -p "${FRAMEWORK_CACHE_DIR}" "${FRAMEWORK_CACHE_DIR}/allure-results" "${FRAMEWORK_CACHE_DIR}/.local" 
mkdir -p "${FRAMEWORK_CACHE_DIR}/.pyenv" "${FRAMEWORK_CACHE_DIR}/completions"

PWDF="/etc/passwd"
GRPF="/etc/group"
MPWDF=${PWDF}
MGRPF=${GRPF}
TPWDF=""
TGRPF=""

generate_pwd_file()
{
    if [ "$(uname)" = "Darwin" ]; then return; fi

    if grep -qw "$DOCKRUN_USER" "$PWDF"; then return; fi

    TPWDF=$(mktemp)
    echo_debug "Generating temporary passwd file $TPWDF"
    cp "$PWDF" "$TPWDF"
    (
        getent passwd $DOCKRUN_USER
    ) >> "$TPWDF"

    MPWDF="$TPWDF"
}

delete_pwd_file()
{
    if [ -z "$TPWDF" ]; then return; fi

    echo_debug "Removing temporary passwd file $TPWDF"
    rm -f "$TPWDF"
}

generate_grp_file()
{
    if [ "$(uname)" = "Darwin" ]; then return; fi

    GROUP=$(id -gn "$DOCKRUN_USER")
    if grep -qw ^"$GROUP" "$GRPF"; then return; fi

    TGRPF=$(mktemp)
    echo_debug "Generating temporary group file $TGRPF"
    cp "$GRPF" "$TGRPF"
    (
        getent group "$GROUP"
    ) >> "$TGRPF"

    MGRPF="$TGRPF"
}

delete_grp_file()
{
    if [ -z "$TGRPF" ]; then return; fi

    echo_debug "Removing temporary group file $TGRPF"
    rm -f "$TGRPF"
}

clean_framework_cache_dir()
{
    find $FRAMEWORK_CACHE_DIR -type f -mtime +7 ! -path '*/.local/*' ! -path '*/log_tumbler/*' -delete
}

if [ -z "${OPENSYNC_ROOT}" ]; then
    echo Missing env OPENSYNC_ROOT >&2
    exit 1
fi
if [ -z "${DOCKER_ROOT}" ]; then
    echo Missing env DOCKER_ROOT >&2
    exit 1
fi

. "${DOCKER_ROOT}/docker-shell-utils.sh"

if [ -t 1 -a -t 0 ]; then
    TTY="--interactive --tty"
fi

if [ -z "${LOUD_DOCKER_BUILD}" ]; then
    QUIET_BUILD="--quiet"
else
    QUIET_BUILD="--progress=plain"
fi

if [ -n "${DOCKER_EXTRA_DOCKERFILE}" ]; then
    RUN_DOCKER_TAG="${DOCKER_TAG}-extra"
else
    RUN_DOCKER_TAG="${DOCKER_TAG}"
fi

if [ "$(uname)" = "Darwin" ]; then
    # MacOS
    _USER=''
    _FLOCK=''
    _TIMEZONE="-e TZ=$(readlink /etc/localtime | sed 's#/var/db/timezone/zoneinfo/##')"
    # workaround for storing pyCharm preferences
    _MOUNT_ROOT='-v/var/root/.ssh:/var/root/.ssh'
    [[ -f /usr/X11/bin/xhost ]] && \
        (socat TCP-LISTEN:6000,reuseaddr,fork UNIX-CLIENT:\"$DISPLAY\" &) && \
        IP=$(/sbin/ifconfig en0 | grep inet | awk '$1=="inet" {print $2}') && \
        /usr/X11/bin/xhost + $IP && \
        DISPLAY=$IP:0 || \
    echo "Install xquartz for X11 support"
else
    DOCKRUN_USER=$(id -un)
    GID=$(id -g)
    # Linux
    _USER="--user $(id -u):$(id -g)"
    _MOUNT_ROOT=''
    _FLOCK_W_ARG=$(flock 2>&1 | grep -qF -- -w && printf "%s" "-w 3600" || echo)
    _FLOCK="flock $_FLOCK_W_ARG -x 9"
    if [ -n "$TZ" ]; then
        _TIMEZONE="-e TZ=$TZ"
    elif [ -f /etc/timezone ]; then
        _TIMEZONE="-e TZ=$(cat /etc/timezone)"
    else
        _TIMEZONE="-v /etc/localtime:/etc/localtime"
    fi
fi

(
    echo grabbing docker build lock ... >&2
    $_FLOCK
    cd "$DOCKER_ROOT"
    echo building docker $DOCKER_TAG ... >&2
    # First build base docker file to get latest TRIDENT image
    docker build $QUIET_BUILD --network=host --tag "$DOCKER_TAG-base" . -f Dockerfile.base >&2
    docker build $QUIET_BUILD --network=host --tag "$DOCKER_TAG" --build-arg PARENT_IMAGE="${DOCKER_TAG}-base" . -f Dockerfile.full >&2

    if [ -n "${DOCKER_EXTRA_DOCKERFILE}" ]; then
        DOCKER_EXTRA_CONTEXT=$(dirname "${DOCKER_EXTRA_DOCKERFILE}")
        docker build $QUIET_BUILD --network=host --tag "$DOCKER_TAG-extra" --build-arg PARENT_IMAGE="${DOCKER_TAG}" \
            "${DOCKER_EXTRA_CONTEXT}" -f "${DOCKER_EXTRA_DOCKERFILE}" >&2
    fi

) 9>"/tmp/dockrun_$(id -u)_lockfile"

# Set the name for the container to have the possibility to kill it in Jenkins
DOCKER_CONTAINER_NAME_OPT=
if [ -n "${DOCKER_CONTAINER_NAME}" ]; then
    DOCKER_CONTAINER_NAME_OPT="--name $DOCKER_CONTAINER_NAME"
elif [ -n "${JOB_BASE_NAME}" ] && [ -z "${PR_CHECK}" ]; then
    DOCKER_CONTAINER_NAME_OPT="--name $(get_container_name_for_jenkins_job)"
fi

SSHARGS=
if [ -e "$SSH_AUTH_SOCK" ]; then
    SSHARGS="-eSSH_AUTH_SOCK -v"$SSH_AUTH_SOCK:$SSH_AUTH_SOCK""
    if [ $(uname) = "Darwin" ]; then
        SSHARGS="-v /run/host-services/ssh-auth.sock:/run/host-services/ssh-auth.sock -e SSH_AUTH_SOCK="/run/host-services/ssh-auth.sock""
    fi
fi

_MOUNT_CUR_DIR=
if [ "$OPENSYNC_ROOT" != "$(pwd)" ] && [ "$HOME" != "$(pwd)" ]; then
    _MOUNT_CUR_DIR="-v$(pwd):$(pwd)"
fi

QASE_ENV="
--env QASE_TESTOPS_API_TOKEN
--env QASE_RUN_COMPLETE
--env QASE_REPORT
--env QASE_API_BASE_URL
--env QASE_TESTOPS_PROJECT=$QASE_PROJECT_CODE
--env QASE_TESTOPS_PLAN_ID=$QASE_PLAN_ID
--env QASE_TESTOPS_RUN_ID=$QASE_RUN_ID
--env QASE_TESTOPS_RERUN_FAILURES=$QASE_RERUN_FAILURES
--env QASE_WEB_SRF_TOKEN
--env QASE_WEB_HOST_SESSION
--env QASE_WEB_SESSION_NAME
--env QASE_WEB_SESSION
--env QASE_WEB_EMAIL
--env QASE_WEB_PASS"


DOCKER_COMMAND_EXEC='
export PYTHONDONTWRITEBYTECODE=true
export PYTHONPATH="$OPENSYNC_ROOT:$PYTHONPATH"
export PYTHON_PATH="$OPENSYNC_ROOT:$PYTHON_PATH"
export PATH="$TOOLS_DIR:$PATH"
export SHELL=/bin/bash
uv venv --seed -q $VIRTUAL_ENV
uv pip sync "$OPENSYNC_ROOT/requirements.txt" -q
. "$VIRTUAL_ENV/bin/activate"
# redirecting errors in case qase/extra tools are not available:
uv pip install -q --no-deps \
    -e $OPENSYNC_ROOT/lib/qase-python/qase-python-commons/ \
    -e $OPENSYNC_ROOT/lib/qase-python/qase-pytest/ \
    -e $OPENSYNC_ROOT/lib/qase-python/qaseio/ > /dev/null 2>&1
uv pip install -q --no-deps -e $OPENSYNC_ROOT > /dev/null 2>&1
uv pip install -q --no-deps -e $OPENSYNC_ROOT/lib_testbed/generic/tools/osrt_cli_tools > /dev/null 2>&1
uv pip install -q --no-deps -e $TOOLS_DIR/osrt_cloud_tools > /dev/null 2>&1
uv pip install -q --no-deps -e $OPENSYNC_ROOT/lib/tools/osrt_extra_cli_tools > /dev/null 2>&1
if [ -f ~/.bashrc ]; then
  cp ~/.bashrc "$FRAMEWORK_CACHE_DIR/bashrc"
else
  touch "$FRAMEWORK_CACHE_DIR/bashrc"
fi
process-osrt-bash-complete-scripts "$FRAMEWORK_CACHE_DIR/completions" "$FRAMEWORK_CACHE_DIR/bashrc"
test -z "$1" && osrt --help
test -z "$1" || set -- -c '"'"'"$@"'"'"' - "$@"
echo "export PATH=$VIRTUAL_ENV/bin:$PATH" >> "$FRAMEWORK_CACHE_DIR/bashrc"
/bin/bash --rcfile "$FRAMEWORK_CACHE_DIR/bashrc" "$@"
'

if [ -n "${SKIP_DOCKER_START}" ]; then
    return 0
fi

generate_pwd_file
generate_grp_file

sig='INT HUP KILL TERM EXIT QUIT'
id=
cleanup() { r=$?; trap - $sig; test -z $id || docker kill $id; delete_pwd_file; delete_grp_file; clean_framework_cache_dir; exit $r; }
trap cleanup $sig
id=$(docker $DOCKER_COMMAND \
        --rm \
        --hostname $DOCKER_HOSTNAME \
        --init \
        $TTY \
        --tmpfs=/tmp:exec \
        --net host \
        --env debian_chroot=DOCKER:"$RUN_DOCKER_TAG" \
        --env HOME="$HOME" \
        --env TERM \
        --env JOB_NAME \
        --env BUILD_NUMBER \
        --env BUILD_URL \
        --env CLOUD_SMOKE_USER \
        --env CLOUD_SMOKE_PASS \
        --env OPENSYNC_ROOT \
        --env FRAMEWORK_CACHE_DIR \
        --env UV_CACHE_DIR=/var/cache/uv \
        --env TOOLS_DIR \
        --env DISPLAY=$DISPLAY \
        --env QT_X11_NO_MITSHM=1 \
        --env VIRTUAL_ENV \
        --workdir "$(pwd)" \
        -v/"$OPENSYNC_ROOT":"$OPENSYNC_ROOT":delegated \
        -v"$MPWDF":/etc/passwd:cached \
        -v"$MGRPF":/etc/group:cached \
        -v$HOME:$HOME:delegated \
        -v"${FRAMEWORK_CACHE_DIR}/.local":"$HOME/.local":delegated \
        -v/tmp/.X11-unix:/tmp/.X11-unix:cached \
        -v/dev/shm:/dev/shm:cached \
        -v"${FRAMEWORK_CACHE_DIR}/.pyenv":"$HOME/.pyenv":delegated \
        -v"trident-uv-cache-${USER}":"/var/cache/uv":delegated \
        -v"${VIRTUAL_ENV}" \
        --shm-size 1G \
        $_MOUNT_CUR_DIR \
        $_MOUNT_ROOT \
        $_USER \
        $_TIMEZONE \
        $DOCKER_OPTS \
        $QASE_ENV \
        $SSHARGS \
        $DOCKER_CONTAINER_NAME_OPT \
        "$RUN_DOCKER_TAG" \
        sh -c "$DOCKER_COMMAND_EXEC" - "$@")

set +e

docker start $DOCKER_START_FLAG $id
r=$?
id=
exit $r
