ARG PARENT_IMAGE=""
FROM $PARENT_IMAGE:latest

RUN --mount=type=cache,target=/var/cache/apt,sharing=locked \
    --mount=type=cache,target=/var/lib/apt,sharing=locked \
    eatmydata apt update && eatmydata apt install -y  \
# - Install java
    openjdk-8-jdk \
    ant \
# - Install Firefox prerequisites
    software-properties-common \
    libcanberra-gtk-module \
    libcanberra-gtk3-module \
    xserver-xorg \
    dbus-x11 \
# - Install Webkit browser
    webkit2gtk-driver

ENV JAVA_HOME /usr/lib/jvm/java-8-openjdk-amd64/
RUN export JAVA_HOME

# -- Install firefox
RUN --mount=type=cache,target=/var/cache/apt,sharing=locked \
    --mount=type=cache,target=/var/lib/apt,sharing=locked \
    eatmydata add-apt-repository ppa:mozillateam/ppa
RUN --mount=type=cache,target=/var/cache/apt,sharing=locked \
    --mount=type=cache,target=/var/lib/apt,sharing=locked \
    eatmydata apt update && eatmydata apt install -y -t 'o=LP-PPA-mozillateam' firefox

# Disable CORS
RUN \
    CFG_FILE="/usr/lib/firefox/firefox.cfg" && \
    mkdir -p /usr/lib/firefox/defaults/pref/ && \
    echo '// IMPORTANT: Start your code on the 2nd line' > "$CFG_FILE" && \
    JS_FILE="/usr/lib/firefox/defaults/pref/autoconfig.js" && \
    echo '' > "$JS_FILE" && \
    echo 'pref("general.config.filename", "firefox.cfg");' >> "$JS_FILE" && \
    echo 'pref("general.config.obscure_value", 0);' >> "$JS_FILE" && \
    echo 'pref("security.fileuri.strict_origin_policy", false);' >> "$JS_FILE"

# -- Install GeckoDriver
ARG geckodriver_checksum="79b2e77edd02c0ec890395140d7cdc04a7ff0ec64503e62a0b74f88674ef1313"
ARG geckodriver_tarball="/var/cache/geckodriver/geckodriver.tgz"
RUN --mount=type=cache,target=/var/cache/geckodriver \
    sha256sum --check --status 2>/dev/null <<< "$geckodriver_checksum  $geckodriver_tarball" \
    || wget "https://github.com/mozilla/geckodriver/releases/download/v0.34.0/geckodriver-v0.34.0-linux64.tar.gz" -O $geckodriver_tarball \
    && sha256sum --check <<< "$geckodriver_checksum  $geckodriver_tarball" \
    && tar zxf $geckodriver_tarball -C /usr/bin/

# -- Install Jmeter
ARG jmeter_checksum="f68efc17fe060f698c48a6abe2599a933927486bda2924dbe14c74895318ddde"
ARG jmeter_tarball="/var/cache/jmeter/jmeter.tgz"
RUN --mount=type=cache,target=/var/cache/jmeter \
    sha256sum --check --status 2>/dev/null <<< "$jmeter_checksum  $jmeter_tarball" \
    || wget --no-check-certificate https://archive.apache.org/dist/jmeter/binaries/apache-jmeter-5.6.3.tgz -O $jmeter_tarball \
    && sha256sum --check <<< "$jmeter_checksum  $jmeter_tarball" \
    && tar xf $jmeter_tarball -C /opt \
    && mv /opt/apache-jmeter-5.6.3 /opt/jmeter \
    && ln -s /opt/jmeter/bin/jmeter /usr/local/bin/jmeter

# -- Install Jmeter plugins as needed
ARG jmeter_plugins_manager_checksum="eb5996293465d908a17b809acf8e914682840d06f58eaee18f6cdc34507f921f"
ARG jmeter_plugins_manager_tarball="/var/cache/jmeter/jmeter-plugins-manager-1.8.jar"
RUN --mount=type=cache,target=/var/cache/jmeter \
    sha256sum --check --status 2>/dev/null <<< "$jmeter_plugins_manager_checksum  $jmeter_plugins_manager_tarball" \
    || wget http://search.maven.org/remotecontent?filepath=kg/apc/jmeter-plugins-manager/1.8/jmeter-plugins-manager-1.8.jar -O $jmeter_plugins_manager_tarball \
    && sha256sum --check <<< "$jmeter_plugins_manager_checksum  $jmeter_plugins_manager_tarball" \
    && cp $jmeter_plugins_manager_tarball /opt/jmeter/lib/ext/jmeter-plugins-manager-1.8.jar
RUN java -cp /opt/jmeter/lib/ext/jmeter-plugins-manager-1.8.jar org.jmeterplugins.repository.PluginManagerCMDInstaller

# -- Install Databricks Dependencies
ARG databricks_checksum="bc4163aefff3bed05bcbe96ca293020ac647341d8012d39d3107cd278185295c"
ARG databricks_tarball="/var/cache/databricks/DatabricksJDBC42-2.6.33.1055.zip"
RUN --mount=type=cache,target=/var/cache/databricks \
    sha256sum --check --status 2>/dev/null <<< "$databricks_checksum  $databricks_tarball" \
    || wget https://databricks-bi-artifacts.s3.us-east-2.amazonaws.com/simbaspark-drivers/jdbc/2.6.33/DatabricksJDBC42-2.6.33.1055.zip -O $databricks_tarball \
    && sha256sum --check <<< "$databricks_checksum  $databricks_tarball" \
    && unzip $databricks_tarball -d /opt/databricks \
    && chmod a+x /opt/databricks/DatabricksJDBC42.jar

# Ensure directory for virtual environment exist and everyone can write to it, so that an anonymous volume can be mounted on top of it.
RUN mkdir -p /tmp/.venv/ && chmod 777 /tmp/.venv/

CMD ["bash"]
